name: Build and Release Warden's Key

on:
  push:
    branches:
      - 'main'
    paths:
      - '.github/workflows/build-and-release.yml'
      - 'hasPremiumFromAnySource.patch'
    tags:
      - 'browser-v*'
  pull_request:
    types: [opened, synchronize]
    paths:
      - '.github/workflows/build-and-release.yml'
      - 'hasPremiumFromAnySource.patch'
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create GitHub Release'
        required: false
        default: false
        type: boolean
      force_build:
        description: 'Force build even if no new version'
        required: false
        default: false
        type: boolean
  schedule:
    # On every Sunday 2:00
    - cron: "0 2 * * 0"

defaults:
  run:
    shell: bash

permissions:
  contents: write

jobs:
  version-check:
    name: Check Version and Download Source
    runs-on: ubuntu-22.04
    outputs:
      should_continue: ${{ steps.version-compare.outputs.should_continue }}
      remote_version: ${{ steps.get-remote-version.outputs.remote_version }}
      build_number: ${{ steps.version-info.outputs.build_number }}
      node_version: ${{ steps.node-version.outputs.node_version }}
      should_release: ${{ steps.release-check.outputs.should_release }}
      source_path: ${{ steps.prepare-source.outputs.source_path }}
    steps:
      - name: Check out repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Get remote latest version
        id: get-remote-version
        run: |
          echo "=== Fetching latest browser version from bitwarden/clients ==="
          REMOTE_TAG=$(curl -s "https://api.github.com/repos/bitwarden/clients/releases" | \
            jq -r '[.[] | select(.tag_name | startswith("browser-v")) | .tag_name] | sort_by(. | sub("browser-v"; "") | split(".") | map(tonumber)) | last')
          if [[ "$REMOTE_TAG" == "null" || -z "$REMOTE_TAG" ]]; then
            echo "❌ Failed to get remote version"
            exit 1
          fi
          REMOTE_VERSION=${REMOTE_TAG#browser-v}
          echo "Latest remote browser tag: $REMOTE_TAG"
          echo "Latest remote version: $REMOTE_VERSION"
          echo "remote_tag=$REMOTE_TAG" >> $GITHUB_OUTPUT
          echo "remote_version=$REMOTE_VERSION" >> $GITHUB_OUTPUT
          # Set version as environment variable for subsequent steps
          echo "VERSION=${REMOTE_VERSION}" >> $GITHUB_ENV
          echo "Discovered remote version: ${REMOTE_VERSION}"

      - name: Check if version already exists
        id: version-compare
        run: |
          echo "=== Version Check ==="
          echo "Remote version: ${VERSION}"

          should_continue=false

          # Check if force build is enabled
          if [[ "${{ inputs.force_build }}" == "true" ]]; then
            echo "✅ Force build enabled, continuing..."
            should_continue=true
          else
            # Check if tag already exists
            TAG_NAME="browser-v${VERSION}"
            if git tag -l | grep -q "^${TAG_NAME}$"; then
              echo "⚠️ Tag ${TAG_NAME} already exists, skipping build"
              should_continue=false
            else
              echo "✅ New version ${VERSION} detected, proceeding with build"
              should_continue=true
            fi
          fi

          echo "Decision: should_continue=$should_continue"
          echo "should_continue=$should_continue" >> $GITHUB_OUTPUT

      - name: Prepare browser source
        if: steps.version-compare.outputs.should_continue == 'true'
        id: prepare-source
        uses: ./.github/actions/setup-source
        with:
          remote_version: ${{ steps.get-remote-version.outputs.remote_version }}
          remote_tag: ${{ steps.get-remote-version.outputs.remote_tag }}

      - name: Get version info from source
        if: steps.version-compare.outputs.should_continue == 'true'
        id: version-info
        run: |
          echo "=== Getting version info from source ==="
          SOURCE_PATH="${{ steps.prepare-source.outputs.source_path }}"
          VERSION=$(jq -r '.version' $SOURCE_PATH/apps/browser/src/manifest.json)
          BUILD_NUMBER=${GITHUB_SHA:0:7}
          echo "Manifest version: $VERSION"
          echo "Build number: $BUILD_NUMBER"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT

      - name: Get Node Version from source
        if: steps.version-compare.outputs.should_continue == 'true'
        id: node-version
        run: |
          SOURCE_PATH="${{ steps.prepare-source.outputs.source_path }}"
          if [ -f "$SOURCE_PATH/.nvmrc" ]; then
            NODE_NVMRC=$(cat $SOURCE_PATH/.nvmrc)
            NODE_VERSION=${NODE_NVMRC/v/''}
            echo "Found .nvmrc with version: $NODE_VERSION"
          else
            NODE_VERSION="20"
            echo "No .nvmrc found, using default version: $NODE_VERSION"
          fi
          echo "node_version=$NODE_VERSION" >> $GITHUB_OUTPUT

      - name: Check if should release
        if: steps.version-compare.outputs.should_continue == 'true'
        id: release-check
        run: |
          echo "=== Release Check Debug ==="
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Create release input: ${{ inputs.create_release }}"
          should_release=false
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "✅ Condition met: Push to main branch"
            should_release=true
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/browser-v* ]]; then
            echo "✅ Condition met: Push to browser version tag"
            should_release=true
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ inputs.create_release }}" == "true" ]]; then
            echo "✅ Condition met: Manual dispatch with create_release=true"
            should_release=true
          elif [[ "${{ github.event_name }}" == "schedule" ]]; then
            echo "✅ Condition met: Scheduled run with new version"
            should_release=true
          else
            echo "❌ No release conditions met"
          fi
          echo "Final decision: should_release=$should_release"
          echo "should_release=$should_release" >> $GITHUB_OUTPUT

      - name: Upload Patched Source Artifact
        if: steps.version-compare.outputs.should_continue == 'true'
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: browser-source
          path: ${{ steps.prepare-source.outputs.source_path }}
          if-no-files-found: error

  locales-test:
    name: Locales Test
    runs-on: ubuntu-22.04
    needs: version-check
    if: needs.version-check.outputs.should_continue == 'true'
    steps:
      - name: Download browser source artifact
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: browser-source
          path: browser-source

      - name: Testing locales - extName length
        run: |
         found_error=false
         echo "Locales Test"
         echo "============"
         echo "extName string must be 40 characters or less"
         echo
         for locale in $(ls browser-source/apps/browser/src/_locales/); do
           string_length=$(jq '.extName.message | length' browser-source/apps/browser/src/_locales/$locale/messages.json)
           if [[ $string_length -gt 40 ]]; then
             echo "$locale: $string_length"
             found_error=true
           fi
         done
         if $found_error; then
           echo
           echo "Please fix 'extName' for the locales listed above."
           exit 1
         else
           echo "Test passed!"
         fi

  build:
    name: Build Extensions
    runs-on: ubuntu-22.04
    needs: [version-check, locales-test]
    if: needs.version-check.outputs.should_continue == 'true'
    env:
      _BUILD_NUMBER: ${{ needs.version-check.outputs.build_number }}
      _NODE_VERSION: ${{ needs.version-check.outputs.node_version }}
    strategy:
      matrix:
        include:
          - name: "chrome"
            npm_command: "dist:chrome"
            archive_name: "dist-chrome.zip"
            artifact_name: "dist-chrome-MV3"
          - name: "edge"
            npm_command: "dist:edge"
            archive_name: "dist-edge.zip"
            artifact_name: "dist-edge-MV3"
          - name: "firefox"
            npm_command: "dist:firefox"
            archive_name: "dist-firefox.zip"
            artifact_name: "dist-firefox"
          - name: "opera-mv3"
            npm_command: "dist:opera:mv3"
            archive_name: "dist-opera.zip"
            artifact_name: "dist-opera-MV3"
    steps:
      - name: Download browser source artifact
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: browser-source
          path: browser-source

      - name: Set up Node
        uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af # v4.1.0
        with:
          cache: 'npm'
          cache-dependency-path: browser-source/package-lock.json
          node-version: ${{ env._NODE_VERSION }}

      - name: Print environment
        run: |
          node --version
          npm --version

      - name: NPM setup (root)
        run: npm ci
        working-directory: browser-source/

      - name: Fix script permissions
        run: |
          echo "=== Setting script permissions ==="
          chmod +x browser-source/apps/browser/scripts/compress.sh
          chmod +x browser-source/apps/browser/scripts/package-safari.ps1
          echo "=== Verifying permissions ==="
          ls -la browser-source/apps/browser/scripts/

      - name: Check source file size
        if: ${{ startsWith(matrix.name, 'firefox') }}
        run: |
          # Declare variable as indexed array
          declare -a FILES
          # Search for source files that are greater than 4M
          TARGET_DIR="./browser-source/apps/browser"
          while IFS=' ' read -r RESULT; do
              FILES+=("$RESULT")
          done < <(find $TARGET_DIR -size +4M)
          # Validate results and provide messaging
          if [[ ${#FILES[@]} -ne 0 ]]; then
              echo "File(s) exceeds size limit: 4MB"
              for FILE in ${FILES[@]}; do
                  echo "- $(du --si $FILE)"
              done
              echo "ERROR Firefox rejects extension uploads that contain files larger than 4MB"
              # Invoke failure
              exit 1
          fi

      - name: Build extension
        run: |
          echo "=== Building ${{ matrix.name }} extension ==="
          echo "Running command: npm run ${{ matrix.npm_command }}"
          npm run ${{ matrix.npm_command }}
          echo "=== Checking build output ==="
          ls -la dist/ || echo "No dist directory found"
        working-directory: browser-source/apps/browser

      - name: Upload extension artifact
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: ${{ matrix.artifact_name }}-${{ env._BUILD_NUMBER }}
          path: browser-source/apps/browser/dist/${{ matrix.archive_name }}
          if-no-files-found: error

  create-tag:
    name: Create Version Tag
    runs-on: ubuntu-22.04
    needs: [version-check, build]
    if: needs.version-check.outputs.should_continue == 'true' && needs.version-check.outputs.should_release == 'true'
    env:
      _REMOTE_VERSION: ${{ needs.version-check.outputs.remote_version }}
    steps:
      - name: Check out repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Create and push version tag
        run: |
          echo "=== Creating version tag ==="
          NEW_TAG="browser-v${{ env._REMOTE_VERSION }}"
          echo "Creating tag: $NEW_TAG"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$NEW_TAG" -m "Release browser-v${{ env._REMOTE_VERSION }} - TOTP Unlocked Version"
          git push origin "$NEW_TAG"
          echo "✅ Tag created and pushed: $NEW_TAG"

  release:
    name: Create GitHub Release
    runs-on: ubuntu-22.04
    needs: [version-check, build, create-tag]
    if: needs.version-check.outputs.should_continue == 'true' && needs.version-check.outputs.should_release == 'true'
    env:
      _REMOTE_VERSION: ${{ needs.version-check.outputs.remote_version }}
      _BUILD_NUMBER: ${{ needs.version-check.outputs.build_number }}
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          path: release-artifacts

      - name: List downloaded artifacts
        run: |
          echo "=== Downloaded artifacts ==="
          ls -laR release-artifacts

      - name: Generate release notes
        id: release-notes
        run: |
          cat > release_notes.md << EOF
          🔓 **TOTP 功能完全解锁版本 - 基于 Bitwarden Browser v${{ env._REMOTE_VERSION }}**

          ## 🔄 版本信息
          - **基础版本**: Bitwarden Browser v${{ env._REMOTE_VERSION }}
          - **构建时间**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - **构建编号**: ${{ env._BUILD_NUMBER }}

          ## ⚠️ 免责声明
          本修改版本仅供技术学习和研究使用。请尊重软件版权，支持官方正版软件的开发。
          EOF
          echo "Generated release notes"

      - name: Create release
        uses: ncipollo/release-action@cdcc88a9acf3ca41c16c37bb7d21b9ad48560d87 # v1.15.0
        with:
          artifacts: 'release-artifacts/**/*.zip'
          commit: ${{ github.sha }}
          tag: "browser-v${{ env._REMOTE_VERSION }}"
          name: "Warden's Key browser-v${{ env._REMOTE_VERSION }}"
          bodyFile: "release_notes.md"
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: false

  check-failures:
    name: Check for failures
    if: always()
    runs-on: ubuntu-22.04
    needs: [version-check, locales-test, build, create-tag, release]
    steps:
      - name: Check if any job failed
        if: |
          github.event_name != 'pull_request'
          && contains(needs.*.result, 'failure')
        run: |
          echo "One or more jobs failed"
          echo "=== Job Results ==="
          echo "version-check: ${{ needs.version-check.result }}"
          echo "locales-test: ${{ needs.locales-test.result }}"
          echo "build: ${{ needs.build.result }}"
          echo "create-tag: ${{ needs.create-tag.result }}"
          echo "release: ${{ needs.release.result }}"
          exit 1

      - name: Summary
        if: always()
        run: |
          echo "=== Workflow Summary ==="
          echo "Should continue: ${{ needs.version-check.outputs.should_continue }}"
          echo "Should release: ${{ needs.version-check.outputs.should_release }}"
          echo "Remote version: ${{ needs.version-check.outputs.remote_version }}"
          if [[ "${{ needs.version-check.outputs.should_continue }}" == "true" ]]; then
            echo "✅ Workflow completed - new version processed"
          else
            echo "ℹ️ Workflow skipped - no new version available"
          fi
